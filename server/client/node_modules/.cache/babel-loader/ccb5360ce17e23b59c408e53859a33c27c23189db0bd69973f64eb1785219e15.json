{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext();export const ThemeProvider=_ref=>{let{children}=_ref;const[darkMode,setDarkMode]=useState(()=>{const savedTheme=localStorage.getItem('darkMode');return savedTheme?JSON.parse(savedTheme):false;});useEffect(()=>{localStorage.setItem('darkMode',JSON.stringify(darkMode));if(darkMode){document.body.classList.add('dark-mode');}else{document.body.classList.remove('dark-mode');}},[darkMode]);const toggleDarkMode=()=>{setDarkMode(!darkMode);};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{darkMode,toggleDarkMode},children:children});};export const useTheme=()=>{const context=useContext(ThemeContext);if(!context){throw new Error('useTheme must be used within a ThemeProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","ThemeContext","ThemeProvider","_ref","children","darkMode","setDarkMode","savedTheme","localStorage","getItem","JSON","parse","setItem","stringify","document","body","classList","add","remove","toggleDarkMode","Provider","value","useTheme","context","Error"],"sources":["C:/Users/jalle/VSC/miniproject/server/client/src/context/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n  const [darkMode, setDarkMode] = useState(() => {\n    const savedTheme = localStorage.getItem('darkMode');\n    return savedTheme ? JSON.parse(savedTheme) : false;\n  });\n\n  useEffect(() => {\n    localStorage.setItem('darkMode', JSON.stringify(darkMode));\n    if (darkMode) {\n      document.body.classList.add('dark-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n    }\n  }, [darkMode]);\n\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ darkMode, toggleDarkMode }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE9E,KAAM,CAAAC,YAAY,cAAGN,aAAa,CAAC,CAAC,CAEpC,MAAO,MAAM,CAAAO,aAAa,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACxC,KAAM,CAACE,QAAQ,CAAEC,WAAW,CAAC,CAAGT,QAAQ,CAAC,IAAM,CAC7C,KAAM,CAAAU,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CACnD,MAAO,CAAAF,UAAU,CAAGG,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAG,KAAK,CACpD,CAAC,CAAC,CAEFT,SAAS,CAAC,IAAM,CACdU,YAAY,CAACI,OAAO,CAAC,UAAU,CAAEF,IAAI,CAACG,SAAS,CAACR,QAAQ,CAAC,CAAC,CAC1D,GAAIA,QAAQ,CAAE,CACZS,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC,CAC1C,CAAC,IAAM,CACLH,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,WAAW,CAAC,CAC7C,CACF,CAAC,CAAE,CAACb,QAAQ,CAAC,CAAC,CAEd,KAAM,CAAAc,cAAc,CAAGA,CAAA,GAAM,CAC3Bb,WAAW,CAAC,CAACD,QAAQ,CAAC,CACxB,CAAC,CAED,mBACEL,IAAA,CAACC,YAAY,CAACmB,QAAQ,EAACC,KAAK,CAAE,CAAEhB,QAAQ,CAAEc,cAAe,CAAE,CAAAf,QAAA,CACxDA,QAAQ,CACY,CAAC,CAE5B,CAAC,CAED,MAAO,MAAM,CAAAkB,QAAQ,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,OAAO,CAAG3B,UAAU,CAACK,YAAY,CAAC,CACxC,GAAI,CAACsB,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,8CAA8C,CAAC,CACjE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}